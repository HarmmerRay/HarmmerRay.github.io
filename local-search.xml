<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>跳表及小知识点</title>
    <link href="/2024/03/24/%E8%B7%B3%E8%A1%A8%E5%8F%8A%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9-1/"/>
    <url>/2024/03/24/%E8%B7%B3%E8%A1%A8%E5%8F%8A%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9-1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>跳表及小知识点</title>
    <link href="/2024/03/24/%E8%B7%B3%E8%A1%A8%E5%8F%8A%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2024/03/24/%E8%B7%B3%E8%A1%A8%E5%8F%8A%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>自制LinkedHashMap及一些小知识</title>
    <link href="/2024/03/22/%E8%87%AA%E5%88%B6LinkedHashMap%E5%8F%8A%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    <url>/2024/03/22/%E8%87%AA%E5%88%B6LinkedHashMap%E5%8F%8A%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<hr><p>PS：从现在开始正式维护自己的博客啦。 暂时想到的tag标签分类 knowledge 、bug</p><p>父tag就这两块，具体知识点会有子tag标记 像hadoop、redis、network、dataStructure etc.</p><h1 id="LinkedHashMap自制"><a href="#LinkedHashMap自制" class="headerlink" title="LinkedHashMap自制"></a>LinkedHashMap自制</h1><p>做的LC一道题，时间复杂度为O(1)的CRUD、数据结构，里面就想到了JAVA中的LinkedHashMap  ，编码逻辑十分清楚。文字讲解放在了开头。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: Leetcode_146 LRU缓存</span><br><span class="hljs-comment"> * 最近最少使用元素，查找插入修改时间复杂度都为O(1)。使用HashMap加上有序双向链表(即队列)的方式</span><br><span class="hljs-comment"> * 1、创建Node &#123;key,value,prev,next,有参构造，无参构造&#125;</span><br><span class="hljs-comment"> * 2、补充LRUCache构造方法,就是 初始化链表（head.next = tail; tail.prev = head;）</span><br><span class="hljs-comment"> * 3、补充put get方法，其中用到moveToHead,addToHead,removeTail等方法</span><br><span class="hljs-comment"> * 4、put: hashMap.get(key)，如果没有就添加，创建node对象，addToHead方法添加，并hashmap.put(key),并判断添加完后链表大小是否大于容量，大于则removeTail</span><br><span class="hljs-comment"> * 5、get: hashMap.get(key),有就return得到的value，没有就是return -1</span><br><span class="hljs-comment"> *  6 7 8 朋友们自己多写几下，不要复制粘贴，链表的插入删除移动节点指针得动手练习(我就是动手写的，加强熟练度朋友们)。</span><br><span class="hljs-comment"> * 6、moveToHead: node.prev.next = node.next; node.next.prev = node.prev; node.prev = head; node.next = head.next; head.next.prev = node; head.next = node;</span><br><span class="hljs-comment"> * 7、addToHead: node.prev = head; node.next = head.next; head.next.prev = node; head.next = node;</span><br><span class="hljs-comment"> * 8、removeTail: tail.prev.prev.next = tail; tail.prev = tail.prev.prev;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: HammerRay</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2024/3/22 下午8:35</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LRUCache</span> &#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">DLinkedNode</span> &#123;<br>        <span class="hljs-type">int</span> key;<br>        <span class="hljs-type">int</span> value;<br>        DLinkedNode prev;<br>        DLinkedNode next;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">DLinkedNode</span><span class="hljs-params">()</span> &#123;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">DLinkedNode</span><span class="hljs-params">(<span class="hljs-type">int</span> _key, <span class="hljs-type">int</span> _value)</span> &#123;<br>            key = _key;<br>            value = _value;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Map&lt;Integer, DLinkedNode&gt; cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer, DLinkedNode&gt;();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> capacity;<br>    <span class="hljs-keyword">private</span> DLinkedNode head, tail;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LRUCache</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        <span class="hljs-comment">// hashMap ＋ 队列（双向链表） 一层hash包一层双向链表</span><br>        <span class="hljs-built_in">this</span>.size = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">this</span>.capacity = capacity;<br>        <span class="hljs-comment">// 伪头部和伪尾部</span><br>        head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DLinkedNode</span>();<br>        tail = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DLinkedNode</span>();<br>        head.next = tail;<br>        tail.prev = head;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> &#123;<br>        <span class="hljs-type">DLinkedNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> cache.get(key);<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-comment">// 如果key存在，想通过hashmap定位，再移动到头部  hashmap与hashtable的关系是 前者是线程不安全的，后者安全的</span><br>        moveToHead(node);<br>        <span class="hljs-keyword">return</span> node.value;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(<span class="hljs-type">int</span> key, <span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-type">DLinkedNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> cache.get(key);<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">DLinkedNode</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DLinkedNode</span>(key, value);<br>            cache.put(key, newNode);<br>            addToHead(newNode);<br>            ++size;<br>            <span class="hljs-keyword">if</span> (size &gt; capacity) &#123;<br>                <span class="hljs-type">DLinkedNode</span> <span class="hljs-variable">tail</span> <span class="hljs-operator">=</span> removeTail();<br>                cache.remove(tail.key);<br>                --size;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            node.value = value;<br>            moveToHead(node);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addToHead</span><span class="hljs-params">(DLinkedNode node)</span> &#123;<br>        node.prev = head;<br>        node.next = head.next;<br>        head.next.prev = node;<br>        head.next = node;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">moveToHead</span><span class="hljs-params">(DLinkedNode node)</span> &#123;<br>        node.prev.next = node.next;<br>        node.next.prev = node.prev;<br>        node.prev = head;<br>        node.next = head.next;<br>        head.next = node;<br>        node.next.prev = node;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> DLinkedNode <span class="hljs-title function_">removeTail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">DLinkedNode</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> tail.prev;<br>        tail.prev.prev.next = tail;<br>        tail.prev = tail.prev.prev;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>其中回想起了一些知识点：</p><p>1、HashTable和HashMap的区别，前者是线程安全的，后者线程不安全，那些性能什么差异就是线程安不安全的差异，还有代码上的什么HashTable是实现了Map接口又继承了Dictionary类，HashMap只实现了Map接口，还有具备方法上的差异就不说了，因为个人认为不需要记住这些，感兴趣的朋友自行搜索一哈。</p><p>2、HashTable为什么能实现CRUD为零呢？主要是hash(key)函数，这个函数中，将key值转换为具体的数组上存储的位置index，并且函数中计算出来的数据十分散列，让每一个元素都随机分配到一个数组上。等到CRUD时候,比如get(key),通过hash(key)立马获得index,查找到元素。</p><p>3、HashTable中总会存在冲突有那些解决办法？</p><p>链地址法：hashtable的那个数组元素后，接有链表，发生冲突的元素往链表中添加</p><p>线性探测：从探测产生冲突位置向下一个一个位置地探测是否为空,有空位就向空位中插入。</p><p>二次探测: 通过计算一个二次方程来确定下一个探测的位置 ，有空就插</p><p>二重散列: 使用另一个hash()函数进行偏移量测量，寻找空位。</p><p>4、redis的哨兵模式是什么？</p><p>它是为了保证redis集群的高可用HA而产生的，通过配置配置文件调整哨兵的个数。哨兵节点会向主节点，发送ping，如果足够的哨兵发现，ping主节点异常，则集群开启调整，选取下一个主节点进行故障转移操作。</p><p>哇越往下想越多，redis的选主操作是如何进行的？ 常见的选主算法有哪些？raft和paxos有什么异同？redis常用来做什么？为什么？ etc.. 路漫漫其修远兮哟。</p><p>另外：</p><p>博客更新</p><p>hexo new “<title_name>“ </p><p>cd .&#x2F;source&#x2F;_posts中修改<title_name>.md文件 </p><p>hexo d</p>]]></content>
    
    
    
    <tags>
      
      <tag>knowledge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程序员接单</title>
    <link href="/2024/03/11/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%8E%A5%E5%8D%95/"/>
    <url>/2024/03/11/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%8E%A5%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<div><tr><h2 align="center">代码接单网站</h2></tr>            <tr>                <td><a href="https://www.proginn.com/">程序员客栈</a></td>                <td><a href="https://www.yuanjisong.com/">猿急送</a></td>                <td><a href="https://codemart.com/">码市</a></td>                <td><a href="https://www.freekeer.com/">自由职客</a></td>                <td><a href="https://www.zbj.com/">猪八戒网</a></td>                <td></td>            </tr><h2 style="text-align: center;">立足科技创新促进企业生态发展</h2><h2 style="text-align: center;">坚持产教融合提升股东投资价值</h2></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>deepin20.9安装qemu</title>
    <link href="/2024/03/11/deepin20-9%E5%AE%89%E8%A3%85qemu/"/>
    <url>/2024/03/11/deepin20-9%E5%AE%89%E8%A3%85qemu/</url>
    
    <content type="html"><![CDATA[<p>SourceURL:file:&#x2F;&#x2F;&#x2F;home&#x2F;zy_&#x2F;Documents&#x2F;WPS Cloud Files&#x2F;845999405&#x2F;技术&#x2F;deepin20安装qemu.docx</p><title></title><style>@font-face{font-family:"Times New Roman";}@font-face{font-family:"宋体";}@font-face{font-family:"Symbol";}@font-face{font-family:"Calibri";}@font-face{font-family:"Noto Sans CJK SC";}@list l0:level1{mso-level-number-format:bullet;mso-level-suffix:tab;mso-level-text:"";mso-level-tab-stop:36.0000pt;mso-level-number-position:left;margin-left:36.0000pt;text-indent:-18.0000pt;font-family:Symbol;font-size:10.0000pt;}@list l0:level2{mso-level-number-format:bullet;mso-level-suffix:tab;mso-level-text:"";mso-level-tab-stop:72.0000pt;mso-level-number-position:left;margin-left:72.0000pt;text-indent:-18.0000pt;font-family:Symbol;font-size:10.0000pt;}@list l0:level3{mso-level-number-format:bullet;mso-level-suffix:tab;mso-level-text:"";mso-level-tab-stop:108.0000pt;mso-level-number-position:left;margin-left:108.0000pt;text-indent:-18.0000pt;font-family:Symbol;font-size:10.0000pt;}@list l0:level4{mso-level-number-format:bullet;mso-level-suffix:tab;mso-level-text:"";mso-level-tab-stop:144.0000pt;mso-level-number-position:left;margin-left:144.0000pt;text-indent:-18.0000pt;font-family:Symbol;font-size:10.0000pt;}@list l0:level5{mso-level-number-format:bullet;mso-level-suffix:tab;mso-level-text:"";mso-level-tab-stop:180.0000pt;mso-level-number-position:left;margin-left:180.0000pt;text-indent:-18.0000pt;font-family:Symbol;font-size:10.0000pt;}@list l0:level6{mso-level-number-format:bullet;mso-level-suffix:tab;mso-level-text:"";mso-level-tab-stop:216.0000pt;mso-level-number-position:left;margin-left:216.0000pt;text-indent:-18.0000pt;font-family:Symbol;font-size:10.0000pt;}@list l0:level7{mso-level-number-format:bullet;mso-level-suffix:tab;mso-level-text:"";mso-level-tab-stop:252.0000pt;mso-level-number-position:left;margin-left:252.0000pt;text-indent:-18.0000pt;font-family:Symbol;font-size:10.0000pt;}@list l0:level8{mso-level-number-format:bullet;mso-level-suffix:tab;mso-level-text:"";mso-level-tab-stop:288.0000pt;mso-level-number-position:left;margin-left:288.0000pt;text-indent:-18.0000pt;font-family:Symbol;font-size:10.0000pt;}@list l0:level9{mso-level-number-format:bullet;mso-level-suffix:tab;mso-level-text:"";mso-level-tab-stop:324.0000pt;mso-level-number-position:left;margin-left:324.0000pt;text-indent:-18.0000pt;font-family:Symbol;font-size:10.0000pt;}@list l1:level1{mso-level-number-format:decimal;mso-level-suffix:space;mso-level-text:"%1.";mso-level-tab-stop:none;mso-level-number-position:left;margin-left:0.0000pt;text-indent:0.0000pt;font-family:'Times New Roman';}p.MsoNormal{mso-style-name:正文;mso-style-parent:"";margin:0pt;margin-bottom:.0001pt;mso-pagination:none;text-align:justify;text-justify:inter-ideograph;font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;}span.10{font-family:'Times New Roman';}span.15{font-family:'Times New Roman';color:rgb(0,0,255);text-decoration:underline;text-underline:single;}span.msoIns{mso-style-type:export-only;mso-style-name:"";text-decoration:underline;text-underline:single;color:blue;}span.msoDel{mso-style-type:export-only;mso-style-name:"";text-decoration:line-through;color:red;}@page{mso-page-border-surround-header:no; mso-page-border-surround-footer:no;}@page Section0{margin-top:72.0000pt;margin-bottom:72.0000pt;margin-left:90.0000pt;margin-right:90.0000pt;size:595.3000pt 841.9000pt;layout-grid:15.6000pt;mso-header-margin:42.5500pt;mso-footer-margin:49.6000pt;}div.Section0{page:Section0;}</style><p>deepin20安装qemu</p><p>1. 从github上克隆下来源码</p><p>git clone <a href="https://github.com/qemu/qemu.git">GitHub - qemu&#x2F;qemu: Official QEMU mirror. Please see https://www.qemu.org/contribute/ for how to submit changes to QEMU. Pull Requests are ignored. Please only use release tarballs from the QEMU website.</a></p><p>2. 进入到cd qemu目录底下</p><p>3. 执行配置</p><p>.&#x2F;configure –enable-kvm –enable-debug –enable-vnc –enable-werror  –target-list&#x3D;”x86_64-softmmu”</p><p>遇到错误:</p><p> </p><p>缺失工具,安装工具</p><p>pip install sphinx&#x3D;&#x3D;5.3.0</p><p>pip install –upgrade sphinx</p><p>sudo apt-get install ninja-build</p><p> </p><p> </p><p>大概率是系统缺少 pixman像素库:</p><p>sudo apt-get install libpixman-1-0 libpixman-1-dev、</p><p>至此，.&#x2F;configuration执行成功</p><p> </p><p>4. 执行编译 安装 sudo make -j10 &amp; sudo make install</p><p> </p><p> </p><p>5. 安装完毕后&#x2F;usr&#x2F;local&#x2F;bin底下出现</p><p> </p><p>· ivshmem-client&#x2F;server：这是一个 guest 和 host 共享内存的应用程序，遵循 C&#x2F;S 的架构。</p><p>· qemu-ga：这是一个不利用网络实现 guest 和 host 之间交互的应用程序（使用 virtio-serial），运行在 guest 中。</p><p>· qemu-io：这是一个执行 Qemu I&#x2F;O 操作的命令行工具。</p><p>· qemu-system-x86_64：Qemu 的核心应用程序，虚拟机就由它创建的。</p><p>· qemu-img：创建虚拟机镜像文件的工具，下面有例子说明。</p><p>· qemu-nbd：磁盘挂载工具。</p><p>此时qemu的安装已全部结束！  恭喜你!</p>]]></content>
    
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My New Post</title>
    <link href="/2024/03/11/My-New-Post/"/>
    <url>/2024/03/11/My-New-Post/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/03/11/hello-world/"/>
    <url>/2024/03/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
